<?php
// @TODO add fields for proposal submission, perms (only volunteers can see), assign to selfs
// @TODO view for reviewing proposals (Inline entity editing)
// @TODO add fields for events
// @TODO Add fields for project
// @TODO geo location modules
// @TODO views for sponsors
// @TODO workflow for proposal to project?

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 */
function givecamp_install() {
  // Custom stuff for givecamp
  givecamp_set_vars();
  givecamp_set_text_formats();
  givecamp_set_fields_types();
  givecamp_set_perm_roles();
  givecamp_set_blocks();
  givecamp_set_nodes_links();
}

/**
 * Defines variables for nodes and contrib modules
 */
function givecamp_set_vars() {
  // Default page not promoted and comments disabled.
  variable_set('node_options_page', array('status'));
  variable_set('comment_page', COMMENT_NODE_HIDDEN);
  
  // Block, sponsor and webform comments disabled.
  variable_set('comment_block', COMMENT_NODE_HIDDEN);
  variable_set('comment_webform', COMMENT_NODE_HIDDEN);
  variable_set('comment_sponsor', COMMENT_NODE_HIDDEN);

  // Blocks, sponsors and webforms not promoted
  variable_set('node_options_block', array('status'));
  variable_set('node_options_sponsor', array('status'));
  variable_set('node_options_webform', array('status'));
  
  // Don't display date/author info on page, block, sponsor webform nodes.
  variable_set('node_submitted_page', FALSE);
  variable_set('node_submitted_block', FALSE);
  variable_set('node_submitted_sponsor', FALSE);
  variable_set('node_submitted_webform', FALSE);
  
  // Don't let a particular content type add links to main menu
  variable_set('menu_parent_article', 'main-menu:0');
  variable_set('menu_parent_block', 'main-menu:0');
  variable_set('menu_parent_webform', 'main-menu:0');

  // IMCE access for manager and admin roles
  variable_set('imce_roles_profiles', array(
    '3' => array(
      'weight' => 0,
      'public_pid' => 1,
    ), 
    '4' => array(
      'weight' => 0,
      'public_pid' => 1,
    ), 
  ));
  
  // Enable nodeblock for block content type
  variable_set('nodeblock_block', 1);
  
  // Cache GA code by default
  variable_set('googleanalytics_cache', 1);

  // Disable user configurable timezones
  variable_set('configurable_timezones', 0);

  // Set pathauto defaults to node title
  variable_set('pathauto_node_pattern', '[node:title]');
  
  // Set pathauto defaults for user patterns
  variable_set('pathauto_user_pattern', 'user/[user:name]');
  
  // Set cron
  variable_set('cron_safe_threshold', '43200');

  // Set search engines to submit
  variable_set('xmlsitemap_engines_engines', array('bing', 'google'));

  // Set XML sitemap minimum
  variable_set('xmlsitemap_engines_minimum_lifetime', '604800');
  
  // Include pages and articles in sitemap
  variable_set('xmlsitemap_settings_node_page', array('status' => 1, 'priority' => 0.5));
  variable_set('xmlsitemap_settings_node_article', array('status' => 1, 'priority' => 0.5));
  variable_set('xmlsitemap_settings_node_event', array('status' => 1, 'priority' => 0.5));
  variable_set('xmlsitemap_settings_node_sponsor', array('status' => 1, 'priority' => 0.5));
  variable_set('xmlsitemap_settings_node_project', array('status' => 1, 'priority' => 0.5));
  
  // Disable user register.
  variable_set('user_register', USER_REGISTER_ADMINISTRATORS_ONLY);
  
  // Themes
  variable_set('admin_theme', 'rubik');
  variable_set('node_admin_theme', '1');
  variable_set('theme_default', 'seven');
  
  // Add new date options to be set as vars below
  $values = array(
    array(
      'format' => 'M j, Y',
      'type'  => 'short',
      'locked' => '0'
    ),
    array(
      'format' => 'F j, Y',
      'type' => 'medium',
      'locked' => '0'
    ),
    array(
      'format' => 'D, F j, Y',
      'type' => 'long',
      'locked' => '0'
    ),
  );
  $query = db_insert('date_formats')->fields(array('format', 'type', 'locked'));
  
  foreach ($values as $record) {
    $query->values($record);   
  } 
  $query->execute();
  
  variable_set('date_first_day', '1');
  variable_set('date_format_long', 'D, F j, Y');
  variable_set('date_format_medium', 'F j, Y');
  variable_set('date_format_short', 'M j, Y');

  // Set pages: home and error
  variable_set('site_frontpage', 'node/1');
  variable_set('site_404', 'node/7');
  
  // Logintoboggan
  variable_set('logintoboggan_redirect_on_confirm', ''); // Set path after login
  variable_set('logintoboggan_login_with_email', '1'); 

}

function givecamp_set_text_formats() {
  // Add text formats.
  $filtered_html_format = array(
    'format' => 'filtered_html',
    'name' => 'Filtered HTML',
    'weight' => 0,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // HTML filter.
      'filter_html' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 2,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  $filtered_html_format = (object) $filtered_html_format;
  filter_format_save($filtered_html_format);

  $full_html_format = array(
    'format' => 'full_html',
    'name' => 'Full HTML',
    'weight' => -1,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  $full_html_format = (object) $full_html_format;
  filter_format_save($full_html_format);

  $filtered_settings = array(
    'default' => 1,
    'user_choose' => 0,
    'show_toggle' => 1,
    'theme' => 'advanced',
    'language' => 'en',
    'buttons' => array(
      'default' => array(
        'bold' => 1,
        'italic' => 1,
        'justifyleft' => 1,
        'justifycenter' => 1,
        'justifyright' => 1,
        'bullist' => '1',
        'numlist' => 1,
        'outdent' => 1,
        'indent' => 1,
        'blockquote' => 1,
      ),
    ),
    'toolbar_loc' => 'top',
    'toolbar_align' => 'left',
    'path_loc' => 'bottom',
    'resizing' => 1,
    'verify_html' => 1,
    'preformatted' => 0,
    'convert_fonts_to_spans' => 1,
    'remove_linebreaks' => 1,
    'apply_source_formatting' => 0,
    'paste_auto_cleanup_on_paste' => 1,
    'block_formats' => 'p,h2,h3,h4',
    'css_setting' => 'none',
    'css_path' => NULL,
    'css_classes' => NULL,
  );
  
  $full_settings = array(
    'default' => 1,
    'user_choose' => 0,
    'show_toggle' => 1,
    'theme' => 'advanced',
    'language' => 'en',
    'buttons' => array(
      'default' => array(
        'bold' => 1,
        'italic' => 1,
        'strikethrough' => 1,
        'justifyleft' => 1,
        'justifycenter' => 1,
        'justifyright' => 1,
        'bullist' => '1',
        'numlist' => 1,
        'outdent' => 1,
        'indent' => 1,
        'undo' => 1,
        'redo' => 1,
        'link' => 1,
        'unlink' => 1,
        'image' => 1,
        'sup' => 1,
        'hr' => 1,
        'cut' => 1,
        'copy' => 1,
        'paste' => 1,
        'removeformat' => 1,
        'blockquote' => 1,
      ),
      'advimage' => array('advimage' => 1),
      'advlink' => array('advlink' => 1),
      'paste' => array('pasteword' => 1, 'pastetext' => '1'),
      'table' => array('tablecontrols' => 1),
      'media' => array('media' => 1),
      'xhtmlextras' => array('cite' => 1),
      'imce' => array('imce' => 1),
      'drupal' => array('break' => 1),
    ),
    'toolbar_loc' => 'top',
    'toolbar_align' => 'left',
    'path_loc' => 'bottom',
    'resizing' => 1,
    'verify_html' => 1,
    'preformatted' => 0,
    'convert_fonts_to_spans' => 1,
    'remove_linebreaks' => 1,
    'apply_source_formatting' => 0,
    'paste_auto_cleanup_on_paste' => 1,
    'block_formats' => 'p,h2,h3,h4',
    'css_setting' => 'none',
    'css_path' => NULL,
    'css_classes' => NULL,
  );
  
  $wysiwyg_config = array(
    'full_html' => array(
      'format' => 'full_html',
      'editor' => 'tinymce',
      'settings' => $full_settings,
    ),
    'filtered_html' => array(
      'format' => 'filtered_html',
      'editor' => 'tinymce',
      'settings' => $filtered_settings,
    ),
    'plain_text' => array(
      'format' => 'plain_text',
      'editor' => '',
      'settings' => '',
    ),
  );

  foreach ($wysiwyg_config as $record) {
    db_merge('wysiwyg')
      ->key(array('format' => $record['format']))
      ->fields(array(
        'editor' => $record['editor'],
        'settings' => serialize($record['settings']),
      ))
      ->execute();
  }
  wysiwyg_profile_cache_clear();
  
}

/**
 * Set up user roles and permissions
 */
function givecamp_set_perm_roles() {
  // MAKE Sure you aren't setting perms for disabled modules otherwise you get
  // Integrity constraint violation: 1048 Column 'module' cannot be null

  // Set perms for default roles
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('access content', 'search content'));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('access content', 'search content'));
  
  // Create role for admins with all available permissions assigned.
  $admin_role = new stdClass();
  $admin_role->name = 'administrator';
  $admin_role->weight = 4;
  user_role_save($admin_role);
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
  // Set this as the admin role.
  variable_set('user_admin_role', $admin_role->rid);

  // Assign user 1 as an admin
  db_insert('users_roles')
    ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
    ->execute();
  
    // Create role for managers
  $manager_role = new stdClass();
  $manager_role->name = 'manager';
  $manager_role->weight = 3;
  user_role_save($manager_role);
  
  $permissions = array(
    'access administration menu',
    'use text format full_html',
    'access contextual links',
    'administer menu',
    'edit meta tags',
    'administer nodes',
    'access content overview',
    'create article content',
    'create block content',
    'create page content',
    'create event content',
    'create sponsor content',
    'create webform content',
    'edit any article content',
    'edit any page content',
    'edit own article content',
    'edit own block content',
    'edit any block content',
    'edit own page content',
    'edit own event content',
    'edit any event content',
    'edit own sponsor content',
    'edit any sponsor content',
    'edit own webform content',
    'edit any webform content',
    'revert revisions',
    'view own unpublished content',
    'view revisions',
    'create url aliases',
    'use advanced search',
    'access administration pages',
    'block IP addresses',
    'view the administration theme',
    'access site reports',
    'edit terms in 1',
    'access all webform results',
    'edit all webform submissions',
    'edit own webform submissions',
    'access own webform results',
    'access own webform submissions',
    'delete own webform submissions',
  );

  user_role_grant_permissions($manager_role->rid, $permissions);
  
  // Create editor role with some sensible defaults
  $editor_role = new stdClass();
  $editor_role->name = 'volunteer';
  $editor_role->weight = 2;
  user_role_save($editor_role);
  
    $permissions = array(
    'access administration menu',
    'use text format filtered_html',
    'access contextual links',
    'edit meta tags',
    'access content overview',
    'create article content',
    'create block content',
    'create page content',
    'create event content',
    'create sponsor content',
    'edit any article content',
    'edit any page content',
    'edit own article content',
    'edit own block content',
    'edit own page content',
    'edit own event content',
    'edit own sponsor content',
    'revert revisions',
    'view own unpublished content',
    'view revisions',
    'create url aliases',
    'access administration pages',
    'block IP addresses',
    'edit terms in 1',
    'view the administration theme',
    'access own webform results',
    'edit own webform submissions',
    'access own webform submissions',
  );

  user_role_grant_permissions($editor_role->rid, $permissions);
}


function givecamp_set_blocks() {
  $default_theme = variable_get('theme_default', 'seven');
  $admin_theme = 'rubik';
  
  // Enable some blocks.
  $values = array(
    array(
      'module' => 'system',
      'delta' => 'main',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'help',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'help',
      'pages' => '',
      'cache' => -1,
    ),

  );
  $query = db_insert('block')->fields(array('module', 'delta', 'theme', 'status', 'weight', 'region', 'pages', 'cache'));
  foreach ($values as $record) {
    $query->values($record);
  }
  $query->execute();
  
  // Set default theme settings
  variable_set('theme_rubik_settings', array(
    'toggle_logo' => 1,
    'toggle_name' => 1,
    'toggle_slogan' => 0,
    'toggle_node_user_picture' => 0,
    'toggle_comment_user_picture' => 0,
    'toggle_comment_user_verification' => 0,
    'toggle_favicon' => 1,
    'toggle_main_menu' => 1,
    'toggle_secondary_menu' => 0,
    'default_logo' => 0,
    'logo_path' => 'profiles/givecamp/logo.png',
    'logo_upload' => '',
    'default_favicon' => 1,
    'favicon_path' => '',
    'favicon_upload' => '',
  ));
}

function givecamp_set_fields_types() {
  // Default pre-defined content types
  $types = array(
    array(
      'type' => 'page',
      'name' => st('Page'),
      'base' => 'node_content',
      'description' => st("Use <strong>basic pages</strong> for your static content, like a 'About us' page."),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
    array(
      'type' => 'article',
      'name' => st('Article'),
      'base' => 'node_content',
      'description' => st('Use <strong>articles</strong> for time-sensitive content like news, press releases or blog posts.'),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
    array(
      'type' => 'block',
      'name' => st('Block'),
      'base' => 'node_content',
      'description' => st('Use a <strong>block</strong> for small movable content like an address or trademark notice'),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
    array(
      'type' => 'proposal',
      'name' => st('Proposal'),
      'base' => 'node_content',
      'description' => st("<strong>Proposals</strong> are submissions for possible Charity/Non-Profits projects."),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
    array(
      'type' => 'project',
      'name' => st('Project'),
      'base' => 'node_content',
      'description' => st("<strong>Projects</strong> are proposals that have been approved."),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
    array(
      'type' => 'event',
      'name' => st('Event'),
      'base' => 'node_content',
      'description' => st('Use <strong>event</strong> for posting a givecamp or related event.'),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
    array(
      'type' => 'sponsor',
      'name' => st('Sponsor'),
      'base' => 'node_content',
      'description' => st('Use <strong>sponsor</strong> for adding sponsor information to the site'),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
  );

  foreach ($types as $type) {
    $type = node_type_set_defaults($type);
    node_type_save($type);
    node_add_body_field($type);
  }

  // Create a default vocabulary named "Tags", enabled for the 'article' content type.
  $description = st('Use tags to group articles on similar topics into categories.');
  $help = st('Enter a comma-separated list of words to describe your content.');
  $vocabulary = (object) array(
    'name' => st('Tags'),
    'description' => $description,
    'machine_name' => 'tags',
    'help' => $help,

  );
  taxonomy_vocabulary_save($vocabulary);

  // Create fields to be binded to entities later
  $default_fields = array(
    array(
      'field_name' => 'field_' . $vocabulary->machine_name,
      'type' => 'taxonomy_term_reference',
      // Set cardinality to unlimited for tagging.
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'locked' => FALSE,
      'settings' => array(
        'allowed_values' => array(
          array(
            'vocabulary' => $vocabulary->machine_name,
            'parent' => 0,
          ),
        ),
      ),
    ),
    array(
      'field_name' => 'field_image',
      'type' => 'image',
      'cardinality' => 1,
      'locked' => FALSE,
      'indexes' => array('fid' => array('fid')),
      'settings' => array(
        'uri_scheme' => 'public',
        'default_image' => FALSE,
      ),
      'storage' => array(
        'type' => 'field_sql_storage',
        'settings' => array(),
      ),
    ),
    array(
      'field_name' => 'field_sponsor_logo',
      'type' => 'image',
      'cardinality' => 1,
      'locked' => FALSE,
      'indexes' => array('fid' => array('fid')),
      'settings' => array(
        'uri_scheme' => 'public',
        'default_image' => FALSE,
        'description' => t('Upload the sponsor\'s logo'),
      ),
      'storage' => array(
        'type' => 'field_sql_storage',
        'settings' => array(),
      ),
    ),
    array(
      'field_name' => 'field_sponsor_link',
      'type' => 'link_field',
      'cardinality' => 1,
      'locked' => FALSE,
      'settings' => array(
        'attributes' => array(
          'rel' => 'nofollow',
        ),
      ),
      'storage' => array(
        'type' => 'field_sql_storage',
        'settings' => array(),
      ),
    ),
  );
  
  foreach ($default_fields as $key => $value) {
    field_create_field($value);
  }

  // Bind fields to entities
  // See http://api.drupal.org/api/function/field_create_instance/7
  $instances = array(
    array(
      'field_name' => 'field_' . $vocabulary->machine_name,
      'entity_type' => 'node',
      'label' => 'Tags',
      'bundle' => 'article',
      'description' => $vocabulary->help,
      'widget' => array(
        'type' => 'taxonomy_autocomplete',
        'weight' => -4,
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'taxonomy_term_reference_link',
          'weight' => 10,
        ),
        'teaser' => array(
          'label' => 'hidden',
          'type' => 'taxonomy_term_reference_link',
          'weight' => 10,
        ),
      ),
    ),
    array(
      'field_name' => 'field_image',
      'entity_type' => 'node',
      'label' => 'Image',
      'bundle' => 'article',
      'description' => st('Upload an image to go with this article.'),
      'required' => FALSE,
      'settings' => array(
        'file_directory' => 'images',
        'file_extensions' => 'png gif jpg jpeg',
        'max_filesize' => '1 MB',
        'max_resolution' => '',
        'min_resolution' => '',
        'alt_field' => TRUE,
        'title_field' => '',
      ),
      'widget' => array(
        'type' => 'image_image',
        'settings' => array(
          'progress_indicator' => 'throbber',
          'preview_image_style' => 'thumbnail',
        ),
        'weight' => -1,
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'image',
          'settings' => array('image_style' => 'large', 'image_link' => ''),
          'weight' => -1,
        ),
        'teaser' => array(
          'label' => 'hidden',
          'type' => 'image',
          'settings' => array('image_style' => 'medium', 'image_link' => 'content'),
          'weight' => -1,
        ),
      ),
    ),
    array(
      'field_name' => 'field_sponsor_logo',
      'entity_type' => 'node',
      'label' => 'Sponsor Logo',
      'bundle' => 'sponsor',
      'description' => st('Upload a sponsor\'s logo.'),
      'required' => FALSE,
      'settings' => array(
        'file_directory' => 'logos',
        'file_extensions' => 'png gif jpg jpeg',
        'max_filesize' => '1 MB',
        'max_resolution' => '',
        'min_resolution' => '',
        'alt_field' => TRUE,
        'title_field' => '',
      ),
      'widget' => array(
        'type' => 'image_image',
        'settings' => array(
          'progress_indicator' => 'throbber',
          'preview_image_style' => 'thumbnail',
        ),
        'weight' => -1,
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'image',
          'settings' => array('image_style' => 'large', 'image_link' => ''),
          'weight' => -1,
        ),
        'teaser' => array(
          'label' => 'hidden',
          'type' => 'image',
          'settings' => array('image_style' => 'medium', 'image_link' => 'content'),
          'weight' => -1,
        ),
      ),
    ),
  );
  
  foreach ($instances as $key => $value) {
    field_create_instance($value);
  }
}

function givecamp_set_nodes_links() {
  // @TODO possibly move node text to different function or an include
  // Create default nodes
  $default_nodes = array(
    array( 
      'title' => st('Home'),
      'node_body' => st('<p>Homepage text replace after install</p>.'),
      //'link_path' => st('home'),
    ),
    array( 
      'title' => st('About'),
      'node_body' => st('<p>GiveCamp is a weekend-long event where technology professionals – from designers, developers and database administrators to marketers and web strategists – donate their time to provide solutions for non-profit organizations.<p><p>Organizations may need a new website or a renewal of an old one. For others, GiveCamp helps them make the leap to modernizing how they operate and for still others, this is an opportunity to think strategically, about their online presence. This is about matching the needs of non-profits with the talent of our local technology-loving community.</p><p>Any 501(3) can apply to participate in GiveCamp. Accepted non-profits will be matched with a project liaison prior to GiveCamp who will help them shape their project and answer any critical questions to ensure the weekend is a success.</p><p>For volunteers, GiveCamp provides a unique opportunity to connect with the local tech community. Individuals can work with their colleagues in company teams, or they can opt to be matched with fellow volunteers who have complementary skill sets.</p><p>Everyone is welcome to head home for the evenings – but there are always the diehards who work from Friday kickoff straight through Sunday afternoon. Food and drinks are provided.</p><p>Would you like to be part of this experience? Applications are open for non-profits, volunteers, and we’re still looking for sponsors! We hope you\'ll join us.</p>'),
    ),
    array( 
      'title' => st('Volunteer'),
      'node_body' => st('<p>Connect with the local tech community for a good cause, <strong>GiveCamp needs your support</strong>. We’ll take on the technology wish lists of 10 to 15 non-profit organizations, and we’re looking for about volunteers, both technical and non-technical, to help us do it.</p><p>A typical GiveCamp draws 75 to 100 volunteers. Individuals can work with their colleagues in company teams, or they can opt to be matched with fellow volunteers who have complementary skill sets. Everyone is welcome to head home for the evenings – but there are always the diehards who work from Friday kickoff straight through Sunday afternoon. Food and drinks provided.<p><h3>Technical volunteers</h3><p>We\'re looking for graphic or UX designers, developers with .NET/Java/LAMP/Open Source/CMS experience, project managers, system/network administrators, DBAs, and non-profit technical consultants and web strategists.</p><h3>Non-technical volunteers</h3><p>Beyond the technology, there are many other aspects that make GiveCamp a success. We need non-technical volunteers to run errands, help with setting up and cleaning up, and everything in between. Whether you can offer a couple hours of your time or join GiveCamp for a couple days, your support is needed.</p>'),
    ),
    array( 
      'title' => st('Non-profits'),
      'node_body' => st('<p>Does your non-profit need a new website? Want to escape those Excel spreadsheets and get a real donor database? Trying to figure out how to build your social media presence? <strong>GiveCamp is for you</strong>.</p><p>Join us for a weekend-long event that brings together technology professionals committed to providing your organization with solutions, strategies, and tools that can help you continue your good work.From designers, web developers and database administrators to marketers and web strategists, GiveCamp assembles a team of experienced professionals.</p><p>All you need to do is apply, tell us about your desired project, and if your non-profit is selected, we’ll work with you to shape it into a project that can be successfully completed during GiveCamp.</p><p>Don’t miss this opportunity to check a project off your technology wish list.</p><p>[Register Link]</p>'),
    ),
    array( 
      'title' => st('Sponsors'),
      'node_body' => st('<p>As a <strong>GiveCamp sponsor</strong>, your support helps bring together volunteers to help serve non-profit organizations.</p><p>Many of the projects created at GiveCamp would typically cost each non-profit between $10,000 and $30,000. And the efficiencies the solutions create – often reducing the paperwork and staff time needed to complete work; means GiveCamp creates value beyond the cost of the projects themselves. <strong>Sponsors are an important part</strong> of ensuring that non-profits continue to benefit from this valuable work, with no cost to participate.</p><p>We need your support to:<ul><li>Provide meals and snacks throughout the weekend</li><li>Cash for Operating Expenses</li><li>Giveaways</li><li>T-Shirts & Name tags</li><li>Professional Services</li></ul><p>Sponsors will receive recognition throughout the GiveCamp weekend including being featured on the GiveCamp website.</p><p>Ready to support the technology needs of our non-profit community? Let us know how you would like to help, or <a href="/contact">contact us</a> to discuss sponsorship opportunities.'),
    ),
    array( 
      'title' => st('Contact'),
      'node_body' => st('<p>DEFAULT TEXT:</p> Use the form below to contact us.'),
    ), 
  );
  
  foreach ($default_nodes as $key => $value) {
    $node = new stdClass();
    $node->type = 'page';
    node_object_prepare($node);

    $node->uid = 1;
    $node->name = 'admin';
    $node->title = $value['title'];
    $node->language = 'und';
    $node->body['und']['0']['value'] = $value['node_body'];
    $node->body['und']['0']['format'] = 'full_html';

    $node->menu = array(
      'enabled' => 1,
      'mlid' => 0,
      'module' => 'menu',
      'hidden' => 0,
      'has_children' => 0,
      'options' => array(),
      'expanded' => 0,
      'parent_depth_limit' => 8,
      'link_title' => $value['title'],
      'description' => '',
      'parent' => 'main-menu:0',
      'weight' => $key,
      'plid' => 0,
      'menu_name' => 'main-menu'
    );

    $node->path['alias'] = $value['link_path'];
    $node->comment = 0;
    $node->status = 1;
    $node->revision = 0;
    $node->log = 'Programmatically created: ' . date('D, F j, Y');
    $node->changed = $_SERVER['REQUEST_TIME'];
    $node->created = $_SERVER['REQUEST_TIME'];

    node_submit($node);
    node_save($node);
  }
  
  // More nodes without menu entries
  $additional_nodes = array(
    array( 
      'title' => st('Whoops, Page Not Found'),
      'node_body' => st('Sorry, If you\'re reading this it means that we couldn\'t find the page you requested. Return to the <a href="/">Homepage</a> or <a href="/search">Search our site</a>. If you have any questions or concerns, please <a href="/contact">contact us</a>.'),
    ),
    array( 
      'title' => st('Venue'),
      'node_body' => st('Add venue image, address, and blurb about location (directions, parking, etc).'),
    ),
    array( 
      'title' => st('Schedule'),
      'node_body' => st('Add schedule information.'),
    ),
    array( 
      'title' => st('FAQ'),
      'node_body' => st('<p>Here is our listing of frequently asked questions about GiveCamp. If you have a question that\'s not answered here, please feel contact.</p>
<h3>What is GiveCamp?</h3><p>GiveCamp is a weekend-long event where software developers, designers, and database administrators donate their time to create custom software for non-profit organizations.</p><h3>Will food be provided?</h3><p>YES! There will be tons of food and drinks, so come ready to work and we\'ll worry about the rest.</p><h3>What should I bring?</h3><p>Bring your laptop and anything you like to use to do software projects (mind-mapping software, project planning software, post-it notes, ipod/headphones, etc.)</p><h3>What should I wear?</h3><p>Wear whatever (appropriate) clothes make you comfortable enough to be able to work for a non-profit all weekend.</p><h3>When do I need to be there?</h3><p>You are welcome to come when you can and leave when you must. The event will run 24 hours a day from Friday through Sunday afternoon. We\'ve posted a schedule on this site that we think outlines a sketch of the weekend.</p><h3>Are there give-aways?</h3><p>You know it! Our sponsors have generously provided some cool stuff you might like. Must be present to win!</p><h3>Who started GiveCamp?</h3><p>GiveCamp was an idea hatched by Chris Koenig, Developer Evangelist for Microsoft, as a way to try to channel the raw energy of the local Dallas developer community towards something that would benefit the local community. Dallas ASP.NET User Group leader Toi Wright organized and ran the first ever GiveCamp, calling the event "We Are Microsoft Charity Challenge Weekend" in January of 2008. At that event, we served 18 charities with over 80 developers to great success!</p><h3>Why did you start GiveCamp?</h3><p>Developers code - it\'s what they do. GiveCamp was started as a way to try to channel that raw energy and passion for development towards something that would benefit local communities.</p><h3>When and where are the next ones?</h3><p>Check out <a href="http://GiveCamp.org">GiveCamp.org</a> for information about upcoming GiveCamp events.</p><h3>How do you select non-profits for GiveCamp?</h3><p>The selection of the non-profit organizations that participate in GiveCamp is determined by each organizing event. Each group has different criteria for selecting non-profits than others. Generally, though, we try to select non-profits where we can achieve the greatest impact by helping them out. A charity without a website is more likely to get selected than a charity with an extensive web site. We also look at the request that\'s being made - we try to focus on getting very clear requirements on what the non-profit is looking for and is something that can be achieved over a marathon-coding weekend by a team of approximately 5 developers.</p><h3>How can developers help?</h3><p>Developers are the life-blood of GiveCamp. In its current state, <a href="http://GiveCamp.org">GiveCamp is all about building websites for non-profits</a>. Developers can help by volunteering to be a developer for an upcoming GiveCamp event in their area, bring in their own team to work a GiveCamp event, or even by contacting GiveCamp.org to volunteer to work on the GiveCamp website or to help organize and run your own GiveCamp event.</p><h3>How can non-developers help?</h3><p>There are several ways that non-developers can help. Before the event begins, there is a LOT of work required to organize everything for the GiveCamp weekend. We can always use a few extra "business analysts" to review the participation submissions made by non-profit organizations and help in the selection committee. On the day of the event, you also have a few choices for helping out. First, volunteers are usually needed to help with things like setting out food, stocking the refrigerator, cleanup, blogging, podcasting and generally just checking up on the teams to see how they\'re doing. If you do have some technical skills that are not programming skills, the GiveCamp events are usually very much in need of web designers to help make the web sites they\'re building look great. Web designers will also often get the extra benefit of working on multiple web site projects during the weekend. DBAs are also often valuable. They too will often get a chance to work with multiple teams and share their skills with multiple non-profits. The bottom line is - if you want to participate in a GiveCamp event, we\'ll find a way for you to do it!<p>'),
    ),
  );
  
    foreach ($additional_nodes as $key => $value) {
    $node = new stdClass();
    $node->type = 'page';
    node_object_prepare($node);

    $node->uid = 1;
    $node->name = 'admin';
    $node->title = $value['title'];
    $node->language = 'und';
    $node->body['und']['0']['value'] = $value['node_body'];
    $node->body['und']['0']['format'] = 'full_html';
    $node->path['alias'] = $value['link_path'];
    $node->comment = 0;
    $node->status = 1;
    $node->revision = 0;
    $node->log = 'Programmatically created: ' . date('D, F j, Y');
    $node->changed = $_SERVER['REQUEST_TIME'];
    $node->created = $_SERVER['REQUEST_TIME'];

    node_submit($node);
    node_save($node);
  }
  
  $menu_items = array();
  
  // Create main menu links
  $menu_items[] = array(
    'link_title' => 'Schedule',
    'link_path' => '<front>',
    'weight' => 3,
    'menu_name' => 'main-menu');

  foreach ($menu_items as $menu_item) {
    menu_link_save($menu_item);
  }

  menu_cache_clear_all();
}

/**
 * Implements hook_views_api().
 */
function givecamp_views_api() {
  list($module, $api) = func_get_args();
  if ($module == "views" && $api == "views_default") {
    return array("version" => "3.0");
  }
}

/** 
 * Implementation of hook_views_default_views().
 */
function givecamp_views_default_views() {

  foreach (glob(dirname(__FILE__) . "/views/*.inc") as $filename) {
    include_once($filename);
    $views[$view->name] = $view;
  }
  return $views;
}