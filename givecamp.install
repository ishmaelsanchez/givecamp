<?php
// @TODO add fields for proposal submission, perms (only volunteers can see), assign to selfs
// @TODO view for reviewing proposals (Inline entity editing)
// @TODO add fields for events
// @TODO WYSIWYG needs to be dead easy
// @TODO Add fields for sponsors
// @TODO Add fields for project
// @TODO geo location modules 

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 */
function givecamp_install() {
  // Use the goodies from the base install
  include_once DRUPAL_ROOT . '/profiles/base/base.install';

  // Custom stuff for givecamp
  givecamp_set_vars();
  givecamp_set_fields_types();
  givecamp_set_perm_roles();
  givecamp_set_blocks();
  givecamp_set_nodes_links();
}

/**
 * Defines variables for nodes and contrib modules
 */
function givecamp_set_vars() {
  // Default page not promoted and comments disabled.
  //variable_set('node_options_page', array('status'));
  //variable_set('comment_page', COMMENT_NODE_HIDDEN);

  // Default articles and webforms not promoted
  //variable_set('node_options_article', array('status'));
  
  // Don't display date and author information page, block, webform nodes.
  //variable_set('node_submitted_page', FALSE);

  // Logintoboggan
  variable_set('logintoboggan_redirect_on_confirm', ''); // Set path after login
  variable_set('logintoboggan_login_with_email', '1'); 

  // Users require administrator approval
  variable_set('user_register', '2');

  //variable_set('user_register', USER_REGISTER_ADMINISTRATORS_ONLY);
  // Set default theme
  variable_set('theme_default', 'seven');
}

/**
 * Set up user roles and permissions
 */
function givecamp_set_perm_roles() {
  
  // MAKE Sure you aren't setting perms for disabled modules otherwise you get
  // Integrity constraint violation: 1048 Column 'module' cannot be null
  
  // Create role for editors
  /*$role = new stdClass();
  $role->name = 'editor';
  $role->weight = 4;
  user_role_save($role);

  $permissions = array(
    'use admin toolbar',
    'access administration menu',
    'access comments',
    'use text format filtered_html',
    'access content overview',
    'create article content',
    'create block content',
    'create page content',
    'edit any article content',
    'edit any page content',
    'edit own article content',
    'edit own block content',
    'edit own page content',
    'revert revisions',
    'view own unpublished content',
    'view revisions',
    'search content',
    'use advanced search',
    'view the administration theme',
    'access own webform results',
    'access own webform submissions',
  );
  user_role_grant_permissions($role->rid, $permissions);
  */
}


function givecamp_set_blocks() {

  $default_theme = variable_get('theme_default', 'seven');
  $admin_theme = 'rubik';
  
  // Enable some blocks.
  $values = array(
    array(
      'module' => 'system',
      'delta' => 'main',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'help',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'help',
      'pages' => '',
      'cache' => -1,
    ),

  );
  $query = db_insert('block')->fields(array('module', 'delta', 'theme', 'status', 'weight', 'region', 'pages', 'cache'));
  foreach ($values as $record) {
    $query->values($record);
  }
  $query->execute();
  
  // Set default theme settings
  variable_set('theme_rubik_settings', array(
    'toggle_logo' => 1,
    'toggle_name' => 1,
    'toggle_slogan' => 0,
    'toggle_node_user_picture' => 0,
    'toggle_comment_user_picture' => 0,
    'toggle_comment_user_verification' => 0,
    'toggle_favicon' => 1,
    'toggle_main_menu' => 1,
    'toggle_secondary_menu' => 0,
    'default_logo' => 0,
    'logo_path' => 'profiles/givecamp/logo.png',
    'logo_upload' => '',
    'default_favicon' => 1,
    'favicon_path' => '',
    'favicon_upload' => '',
  ));
}

function givecamp_set_fields_types() {
   // Insert default pre-defined node types into the database
  // documentation at: http://api.drupal.org/api/HEAD/function/hook_node_info.
  $types = array(
    array(
      'type' => 'proposal',
      'name' => st('Proposal'),
      'base' => 'node_content',
      'description' => st("<strong>Proposals</strong> are submissions for possible Charity/Non-Profits projects."),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
    array(
      'type' => 'project',
      'name' => st('Project'),
      'base' => 'node_content',
      'description' => st("<strong>Projects</strong> are proposals that have been approved."),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
    array(
      'type' => 'event',
      'name' => st('Event'),
      'base' => 'node_content',
      'description' => st('Use <strong>event</strong> for posting a givecamp event.'),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
    array(
      'type' => 'sponsor',
      'name' => st('Sponsor'),
      'base' => 'node_content',
      'description' => st('Use <strong>sponsor</strong> for adding sponsor information to the site'),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
  );

  foreach ($types as $type) {
    $type = node_type_set_defaults($type);
    node_type_save($type);
    node_add_body_field($type);
  }

  // Create a default vocabulary named "Tags", enabled for the 'article' content type.
  $description = st('Use tags to group articles on similar topics into categories.');
  $help = st('Enter a comma-separated list of words to describe your content.');
  $vocabulary = (object) array(
    'name' => st('Tags'),
    'description' => $description,
    'machine_name' => 'tags',
    'help' => $help,

  );
  taxonomy_vocabulary_save($vocabulary);

  $field = array(
    'field_name' => 'field_' . $vocabulary->machine_name,
    'type' => 'taxonomy_term_reference',
    // Set cardinality to unlimited for tagging.
    'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    'settings' => array(
      'allowed_values' => array(
        array(
          'vocabulary' => $vocabulary->machine_name,
          'parent' => 0,
        ),
      ),
    ),
  );
  field_create_field($field);

  $instance = array(
    'field_name' => 'field_' . $vocabulary->machine_name,
    'entity_type' => 'node',
    'label' => 'Tags',
    'bundle' => 'article',
    'description' => $vocabulary->help,
    'widget' => array(
      'type' => 'taxonomy_autocomplete',
      'weight' => -4,
    ),
    'display' => array(
      'default' => array(
        'type' => 'taxonomy_term_reference_link',
        'weight' => 10,
      ),
      'teaser' => array(
        'type' => 'taxonomy_term_reference_link',
        'weight' => 10,
      ),
    ),
  );
  field_create_instance($instance);


  // Create an image field named "Image", enabled for the 'article' content type.
  // Many of the following values will be defaulted, they're included here as an illustrative examples.
  // See http://api.drupal.org/api/function/field_create_field/7

  $field = array(
    'field_name' => 'field_image',
    'type' => 'image',
    'cardinality' => 1,
    'locked' => FALSE,
    'indexes' => array('fid' => array('fid')),
    'settings' => array(
      'uri_scheme' => 'public',
      'default_image' => FALSE,
    ),
    'storage' => array(
      'type' => 'field_sql_storage',
      'settings' => array(),
    ),
  );
  field_create_field($field);


  // Many of the following values will be defaulted, they're included here as an illustrative examples.
  // See http://api.drupal.org/api/function/field_create_instance/7
  $instance = array(
    'field_name' => 'field_image',
    'entity_type' => 'node',
    'label' => 'Image',
    'bundle' => 'article',
    'description' => st('Upload an image to go with this article.'),
    'required' => FALSE,

    'settings' => array(
      'file_directory' => 'field/image',
      'file_extensions' => 'png gif jpg jpeg',
      'max_filesize' => '',
      'max_resolution' => '',
      'min_resolution' => '',
      'alt_field' => TRUE,
      'title_field' => '',
    ),

    'widget' => array(
      'type' => 'image_image',
      'settings' => array(
        'progress_indicator' => 'throbber',
        'preview_image_style' => 'thumbnail',
      ),
      'weight' => -1,
    ),

    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'image',
        'settings' => array('image_style' => 'large', 'image_link' => ''),
        'weight' => -1,
      ),
      'teaser' => array(
        'label' => 'hidden',
        'type' => 'image',
        'settings' => array('image_style' => 'medium', 'image_link' => 'content'),
        'weight' => -1,
      ),
    ),
  );
  field_create_instance($instance);
}

function givecamp_set_nodes_links() {
  $default_nodes = array();
  
  // Create default nodes
  $default_nodes[] = array( 
    'title' => st('Submissions'),
    'node_body' => st('<p><strong>DEFAULT TEXT</strong>:</p> Add info about submissions.'),
    'link_path' => st('submissions'),
  );
  $default_nodes[] = array( 
    'title' => st('Events'),
    'node_body' => st('<p><strong>DEFAULT TEXT</strong>:</p> Add info about events.'),
    'link_path' => st('events'),
  );
  $default_nodes[] = array( 
    'title' => st('Sponsors'),
    'node_body' => st('<p><strong>DEFAULT TEXT</stong>:</p> Add info about sponsors.'),
    'link_path' => st('services'),
  );
  $default_nodes[] = array( 
    'title' => st('Contact'),
    'node_body' => st('<p>DEFAULT TEXT:</p> Use the form below to contact us.'),
    'link_path' => st('contact'),
  );
  
  $default_nodes[] = array( 
    'title' => st('Whoops, Page Not Found'),
    'node_body' => st('Sorry, If you\'re reading this it means that we couldn\'t 
      find the page you requested. Return to the <a href="/">Homepage</a> or <a 
      href="/search">Search our site</a>. If you have any questions or concerns, 
      please <a href="/contact">contact us</a>.'),
    'link_path' => st('error'),
  );
  
  foreach ($default_nodes as $key => $value) {
    $node = new stdClass();
    $node->type = 'page';
    node_object_prepare($node);

    $node->uid = 1;
    $node->name = 'admin';
    $node->title = $value['title'];
    $node->language = 'und';
    $node->body['und']['0']['value'] = $value['node_body'];
    $node->body['und']['0']['format'] = 'full_html';

    $node->menu = array(
      'enabled' => 1,
      'mlid' => 0,
      'module' => 'menu',
      'hidden' => 0,
      'has_children' => 0,
      'options' => array(),
      'expanded' => 0,
      'parent_depth_limit' => 8,
      'link_title' => $value['title'],
      'link_path' => $value['link_path'],
      'description' => '',
      'parent' => 'main-menu:0',
      'weight' => 0,
      'plid' => 0,
      'menu_name' => 'main-menu'
    );

    $node->path['alias'] = $value['link_path'];
    $node->comment = 0;
    $node->status = 1;
    $node->revision = 0;
    $node->log = 'Programmatically created: ' . date('D, F j, Y');
    $node->changed = $_SERVER['REQUEST_TIME'];
    $node->created = $_SERVER['REQUEST_TIME'];

    node_submit($node);
    node_save($node);
  }
  
  $menu_items = array();
  
  // Create main menu links
  $menu_items[] = array(
    'link_title' => 'Schedule',
    'link_path' => '<front>',
    'weight' => 3,
    'menu_name' => 'main-menu');

  foreach ($menu_items as $menu_item) {
    menu_link_save($menu_item);
  }

  menu_cache_clear_all();
}
